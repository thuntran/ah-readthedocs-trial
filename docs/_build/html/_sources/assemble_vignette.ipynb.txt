{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# The Assemble Module\n",
    "\n",
    "The `assemble` module of the `mirah` package finds and forms the essential structure components. These \n",
    "components are the smallest building blocks that form the basis for every repeat in the song. The functions in this module ensure each time step of a song is contained in at most one of the song's essential  structure component by making none of the repeats overlap in time. When repeats do overlap, these repeats undergo a process \n",
    "where they are divided until there are only non-overlapping pieces left over. The following functions are exported from the `assemble` modeule:\n",
    "\n",
    "- **breakup_overlaps_by_intersect**: Extracts repeats in *input\\_pattern\\_obj* that has the starting indices of the repeats, into the essential structure componets using *bw\\_vec*, that has the lengths of each repeat.\n",
    "    \n",
    "- **check_overlaps**: Compares every pair of groups, determining if there are any repeats in any pairs of the groups that overlap. \n",
    "\n",
    "- **hierarchical\\_structure**: Distills the repeats encoded in *matrix\\_no\\_overlaps* (and *key\\_no\\_overlaps*) to the essential structure components and then builds the hierarchical representation. Also optionally outputs visualizations of the hierarchical representations.\n",
    "\n",
    "This module uses `find_all_repeats` from the [`search`](./search_vignette.ipynb) module and `reconstruct_full_block` from the [`utilities`](./utilities_vignette.ipynb) module. \n",
    "\n",
    "For more in depth information on the function calls, an example function pipeline is shown below. Functions from the current module are shown in purple.\n",
    "\n",
    "<img src=\"pictures/assemble_color_sample.png\" alt=\"Chart\" style=\"width:150px;\" align = \"left\"/>\n",
    "<img src=\"pictures/assemble_pipeline.png\" alt=\"Chart\" style=\"width:340px;\" align = \"middle\"/>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Import Modules"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "# NumPy is used for mathematical calculations\n",
    "import numpy as np\n",
    "\n",
    "# Import other modules\n",
    "from inspect import signature \n",
    "\n",
    "# Import assemble\n",
    "import sys, os\n",
    "current_dir = os.path.dirname(os.path.realpath('__file__'))\n",
    "relative_path = os.path.join(current_dir, '..')\n",
    "sys.path.append(relative_path)\n",
    "from mirah.assemble import *"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## breakup_overlaps_by_intersect \n",
    "\n",
    "The purpose of this function is to create the essential structure components matrix. The essential structure components contain the smallest building blocks that form every repeat in the song. This matrix is created using the *input\\_pattern\\_object*, that has the starting indices of the repeats and a vector, *bw\\_vec*, that has the lengths of each repeats. \n",
    " \n",
    "The inputs for this function are: \n",
    "- **input_pattern_obj** (np.ndarray): A binary matrix with 1's where repeats begin and 0's otherwise\n",
    "-  **bw_vec** (np.ndarray): Lengths of the repeats encoded in *input\\_pattern\\_obj*\n",
    "- **thresh_bw** (int): The smallest allowable repeat length \n",
    "\n",
    "The outputs for this function are: \n",
    "- **pattern_no_overlaps** (np.ndarray): A binary matrix with 1's where repeats of essential structure components begin \n",
    "- **pattern_no_overlaps_key** (np.ndarray): A vector containing the lengths of the repeats of essential structure components in *pattern\\_no\\_overlaps* "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The input array is: \n",
      " [[1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0]\n",
      " [0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0]\n",
      " [1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0]\n",
      " [0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0]]\n",
      "The lengths of the repeats in the input array is: \n",
      " [[3]\n",
      " [5]\n",
      " [8]\n",
      " [8]]\n",
      "The smallest allowable repeat length is:  0\n"
     ]
    }
   ],
   "source": [
    "input_pattern_obj = np.array([[1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0],\n",
    "                              [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0],\n",
    "                              [1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n",
    "                              [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0]])\n",
    "bw_vec = np.array([[3],\n",
    "                   [5],\n",
    "                   [8],\n",
    "                   [8]])\n",
    "thresh_bw = 0\n",
    "print(\"The input array is: \\n\", input_pattern_obj)\n",
    "print(\"The lengths of the repeats in the input array is: \\n\", bw_vec)\n",
    "print(\"The smallest allowable repeat length is: \", thresh_bw)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The output array is: \n",
      " [[1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0]\n",
      " [0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0]]\n",
      "The lengths of the repeats in the output array is: \n",
      " [[3]\n",
      " [5]]\n"
     ]
    }
   ],
   "source": [
    "output = breakup_overlaps_by_intersect(input_pattern_obj, bw_vec, thresh_bw)\n",
    "\n",
    "print(\"The output array is: \\n\", output[0])\n",
    "print(\"The lengths of the repeats in the output array is: \\n\", output[1])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## check_overlaps\n",
    "\n",
    "This function compares every pair of groups and checks for overlaps between those pairs. To check every pair of groups, the function creates *compare\\_left* and *compare\\_right*. *compare\\_left* repeats each row the number of rows times, and _compare\\_right_ repeats the whole input the number of rows times times. By comparing each corresponding time step in *compare\\_left* and *compare\\_right*, it determines if there are any overlaps between groups.\n",
    "\n",
    "The input for this function is: \n",
    "\n",
    "- **input_mat** (np.ndarray): An array waiting to be checked for overlaps\n",
    "\n",
    "The output for this function is: \n",
    "- **overlaps\\_yn** (np.ndarray): A logical array where (i,j) = 1 if row i of input matrix and row j of input matrix overlap and (i,j) = 0 elsewhere"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The input array waiting to be checked for overlaps is: \n",
      " [[0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]\n",
      " [1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0]\n",
      " [0 0 0 1 1 1 1 1 0 0 0 1 1 1 1 1 0 0 0]\n",
      " [1 1 1 0 0 0 0 0 1 1 1 0 0 0 0 0 1 1 1]]\n"
     ]
    }
   ],
   "source": [
    "input_mat = np.array([[0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n",
    "                      [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0],\n",
    "                      [0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0],\n",
    "                      [1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1]])\n",
    "\n",
    "print(\"The input array waiting to be checked for overlaps is: \\n\", input_mat)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The output logical array is: \n",
      " [[False  True  True  True]\n",
      " [False False  True  True]\n",
      " [False False False False]\n",
      " [False False False False]]\n"
     ]
    }
   ],
   "source": [
    "output = check_overlaps(input_mat)\n",
    "\n",
    "print(\"The output logical array is: \\n\", output)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##  hierarchical\\_structure\n",
    "\n",
    "This function distills the repeats encoded in matrix\\_no\\_overlaps (and key\\_no\\_overlaps), which are the outputs from the remove\\_overlaps function from the transform module, to the essential structure components and then builds the hierarchical representation. It optionally shows visualizations of the hierarchical structure via the `vis` argument.\n",
    "\n",
    "The inputs for this function are: \n",
    "\n",
    "- **matrix\\_no\\_overlaps** (np.array\\[int]): A binary matrix with 1's where repeats begin and 0's otherwise\n",
    "- **key\\_no\\_overlaps** (np.array\\[int]): A vector containing the lengths of the repeats encoded in matrix_NO\n",
    "- **sn** (int): The song length, which is the number of audio shingles\n",
    "- **vis** (bool): shows visualizations if True (default = False)\n",
    "    \n",
    "The outputs for this function are: \n",
    "\n",
    "- **full_visualization** (np.array\\[int]): A binary matrix representation for full_matrix_NO with blocks of 1's equal to the length's prescribed in full_key\n",
    "            \n",
    "- **full_key** (np.array\\[int]): A vector containing the lengths of the hierarchical structure encoded in full_matrix_NO\n",
    "            \n",
    "- **full_matrix_NO** (np.array\\[int]): A binary matrix with 1's where hierarchical structure begins and 0's otherwise\n",
    "            \n",
    "- **full_anno_lst** (np.array\\[int]): A vector containing the annotation markers of the hierarchical structure encoded in each row of full_matrix_NO"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The matrix representation of the non-overlapping repeats is: \n",
      " [[0 1 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0]]\n",
      "The lengths of the repeats in matrix_no_overlaps are: \n",
      " [2]\n",
      "The song length is: \n",
      " 20\n"
     ]
    }
   ],
   "source": [
    "matrix_no_overlaps = np.array([[0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0]])\n",
    "key_no_overlaps = np.array([2])\n",
    "sn = 20\n",
    "\n",
    "print(\"The matrix representation of the non-overlapping repeats is: \\n\", matrix_no_overlaps)\n",
    "print(\"The lengths of the repeats in matrix_no_overlaps are: \\n\", key_no_overlaps)\n",
    "print(\"The song length is: \\n\", sn)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAeAAAABkCAYAAABeguPvAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjMuNCwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8QVMy6AAAACXBIWXMAAAsTAAALEwEAmpwYAAAUvklEQVR4nO3debhdVXnH8e+PBEggA1MUM5CAoCYgIERApTUqSBABW20bZEpBBRTRFlGQQRAU5LGIY0GFMhMQlaKlIlQCKiokAkIEJAZCAmFISCCBML/9Y63D3ffkTDe5ybp4f5/nuQ/n7PHda6+13r3X3icoIjAzM7M1a63SAZiZmfVHTsBmZmYFOAGbmZkV4ARsZmZWgBOwmZlZAU7AZmZmBfRKApZ0jqQTe2Nbq4uk6ZI+VjoOAEnLJG2xGrZ7mqSFkh7tcPmTJV3S23GsKZI2y2U5oHQsVZImSZpf+T5L0qRyEXWR9A+S5uVye1vpeHqq07YjaZykkDRwTcRlf9skrSvpz5I27XDZeyW9rt2ybROwpAclLZe0VNISSbdIOlzSq+tGxOERcWr7w+ibciIKSUfVTf9snn5yh9vpKMlHxJCImLOS4Tbb9xjgaGBCRKxQSeqTQm+TNFrSj/MFwFOS7pI0Nc/rlc4w18Xdat8j4qFcli+vYviN9nWBpNN6Y1sRsXVETO+NbfWCrwNH5nK7vX5mPk/P5ERX+/t8gTgbtqfeajuSds192VOSnpT0W0lvz/OmSvrNqu6jxb7X+IWvpHXyfu/P5/dBSedLGrcm4yilF/q/TwA3R8SjeXvHSLo758UHJB1TWzAingfOB77QbqOd3gHvHRFDgbHAGXnD5/X0CPq4vwAH1007KE/vFav5anwssCgiHl+N+2jlYmBejmNjUtk91hsb9l1MrxoLzGqzzHY50dX+zlwTga0pkoYBPwe+DWwEjAJOAZ7vwTaKjbqsZHu4CtgH+CgwHNgOmAm8rxdD+1t2GKmPqxGpj9sQmAwcKWlKZf5lwMGS1m251Yho+Qc8COxWN20n4BVgm/z9AuC0/HlDUuV+AlicP4+urLs5cDOwFLgB+C5wSWX+PqQOYgkwHRhfF8vngD8BTwFXAIM63O904GNNjvFk4BLgHmDrPG3r/P0S4OR2+wC+ArwMPAcsA76TpwfwKeB+4IHKtC2BdYA7gE/n6QOA3wInNYlzOHBR3v9c4ATSRdRuwPJ8TpYBF9Stt37d/GXAyHzcV+ZtLs3lPrGy3kjgx3l/DwBHtagny4Dtm8x7KB9zbd/vAN4I/ApYBCwELgU2qDvXX8jn+nng8hz/8ryNzwPj8nYHVs7xqbkMlwK/BDapbPOgXG6LgBNpULcry15AV52u7efgfCwLgeMryw7Oyy8G/gwcA8xv1IbyOf4i8Ncc40xgTJ73FuB64EngPuCfK9v4QN72UuBh4HNN4l4r14u5wOP53A4H1s3lFsAzwF+brB/Alk3m7QTMAJ4mXVydlacPIrWTRaR2exvw+kqdPQ9YkOM+DRiQ500FfkO6K19MqmN7dtCetsyf9wJuz/HMI7fTunM2sMFxTASWNDnG8XmfL+f9LqnUh/8Ers3ltxt1fUrteCrft66cz8fyeZ8MvAC8mLd/Z6N+ltwn1R3LoaT6d3Oefgipj1oMXAeMbXJMtf5hTIv2OxK4Jsc6G/h4XSw/yud4KXAX8CbgOFIdmwe8v66vPR24ldRP/zew0ar28Xn+B0l95hLgFmDbduvSvP9rWJ8blM1mef0V6lJlmW8B366bdj/w7mbrRMTKJeBKp3pEg85qY+DDwHrA0Hzirq6s9ztSg1sH2DUffK2ivYlUuXcH1iZ1srOBdSqx3JoLb6Nc+Q7vcL/TaZ+Avwh8LU87M1ewagLu8T5IDef6HO/gBp3INqQGNB44Hvg9uYNqEOdFpMo8lNQo/wIcmudNotLpN1h3hfn5uJ8jde4DSI3m93neWqTkcFI+V1sAc4A9mmz/BlLimwJsVjdvHHWdIekCZHdSYhhBuig7u67e3QGMqZTbg3TvpLptN5f/X0n1aHD+fkaeN4HU8HbNx/N1UifYkwT8g7zd7UgXBePz/DOAX+dzPAa4m+YJ+BhSB/Zm0lX0dqR6tT6pI/tXYCCwAynR1y4IFwB/lz9vCOzQJO5DSG1mC2AI8BPg4rr62DDBtptParsH5s9DgF3y58OAn5HaxQBgR2BYnnc1cG4+vteR2u9hed7UfA4+ntc7AngEUJv2VGs7k4C3kurqtqRO9EPN6lxlG8NIFwsXAnsCG9bNn0olkVbqw1PAu/L+BtXHV12P1EYXkB4LDcrfd672N636WRon4ItyOQ4GPpTP8/hcX04Abmly3s4Abmp2zvMyNwHfy7FuT7rofl9dP7FH3tdFpIul40n99MfJNxeV8/YwqW9bn3QR3xt9/A6khL8zqb4cnJdft4N1J7Fi/9ewPjcom72AWS3KTqQLwcPrpl9Di5uWiFVLwL8n3wVQ6awaLLc9sDh/3gx4CVivMv+Sysk5EbiyMm+tfCInVWI5oDL/TOCcdvtt1pjrK3uO76FcMR4idaavJuCV2Qep4by3WSeSvx8N3EtKxFs12dcAUqc/oTLtMGB6swpWt36jCngycEPl+wRgef68M/BQ3fLHAf/VZPsbkhr6LNLdwx3A26N7B9LqCvJDwO119e6QVnWxfru5/E+ozP8k8Iv8+STg8sq89Uh3Ij1JwNURlVuBKfnzHGByZd4naJ6A7wP2bbC/fwF+XTftXOBL+fND+XwPa1aGebn/Az5Z+f5mUpKrlVEnCfhp0h1G7W+PPO9m0lDtJnXrHELd3Uie/npSnR1cmbYfcGP+PBWYXXdOAti0TXtqdoFwNvCNTuocKXFdAMwn9UnX0HXXPpXGCfiiumnd4qN7At6PSn1u0O5WJgFvUZn/v+SL7/x9LeBZGtwFky4cp7U452NIbXZoZdrp5JG0HMv1lXl7ky5mayMZQ3N8G1TK5YzK8hNIbW0Aq9DHk0YgTq2L/T7yXWabdSexYv/XsD43KJ/9yTcmTeafAtxJvhCoTL+UJqOZtb9VeQt6FGm4ohtJ60k6V9JcSU/ng9wgPzMZCTwZEc9WVplX+TySNHQGQES8kuePqixTfcP3WdKVS7v9diQiHiJdjX0VuD8iqrGtyj7mtZl/IamRXRsR9zdZZhPSndvcyrS5dC+blVFfnoPyM6axwMj84t0SSUtIIwSvb7SRiFgcEcdGxNZ5mTuAqyWp0fKSXidpmqSHc1leQjrGqnbl1snxDMmfR1a3l+vgotWxbbqfo3pjSHfp9cYCO9eV9/5A7YW6D5NGKuZKuknSO5psv1sbyp8H0uS8NbFDRGxQ+bsuTz+UdAdzr6TbJH0wT7+YNAQ6TdIjks6UtHY+prWBBZVjOpd0J1zzaplW+oUhdEDSzpJulPSEpKeAw1mxDjUUEfdExNSIGE26UxtJSuCt9KQ+NjvPq6K6/7HANyvl+iTpTqxRf7AIeEOL7db65aWVafV9S/V9juXAwuh6+XF5/m/1vNW3h7VJ52al+3jSMR9d10bG5G22W7eRZvW53mLSRcYKJB1JerS1V6SXr6qGki5gm1qpBJzfFhxFen5T72jSVffOETEM+PvaaqQhmY0krVdZfkzl8yOkQq7tR3n+wx2E1Wq/PXFR3tZFK7GPaLLNZtNrvkd6nryHpF2bLLOQdCcztjJtMzorm05iqDePNKxU7YiHRsQH2u4oYiFpiLc2FNRo36fn6dvmsjyAFc9V/Xo9PYaqBcDo2hdJg0lDv71hAd3r8WYtlp1Hev7daPpNdeU9JCKOAIiI2yJiX1Lyupr07L6Rbm2IrlGnVX4hLiLuj4j9cgxfA66StH5EvBgRp0TEBOCdpOd0B+Vjep50h1E7pmH5Iq2jXbaZfxnpznVMRAwHzqHn7Z2IuJd0h7tNm/3WT3+GdNdeU/31QbPz3Gz7rbbVaL15pKH8an0ZHBG3NFjvBmAnSaMbzINUZzaSVE0yPelbGqlvDy+S+rBV6ePnAV+pO+b1IuLyDtZdocyb1ecG6/4J2KL+5TdJhwDHkobqG71hPZ50Z9xUjxKwpGH5KmEaaXjkrgaLDSVdES2RtBHwpdqMiJhLeuh9cn4t/h2k4YyaK4G9JL0vX0EfTWrAjSpVx/vtoSuA99O4g2u3j8dIz946JulA0jOzqcBRwIWSVrhqy1ebVwJfkTRU0ljg30l3jp14DNhY0vAOl78VeFrSFyQNljRA0ja1n2o0OI6v5fkDc0M+gjS8uIj0POkVupfNUPJLLpJGkZ6NdnIMK/v76auAvSW9U9I6pGGjHnfWTVwJHCdpw9zJfbrFsj8ETpW0lZJtJW1MugB7k6QDJa2d/94uaXxuK/tLGh4RL5KGiJv99Opy4N8kbZ7r0VeBKyLipVU9SEkHSBqR71qW5MkvS3qPpLfmkaCnSZ3tyxGxgPQi3H/kvmMtSW+U9O4Od9nufA8l3bk9J2kn0hu+nRzHWyQdXUtISj/h24/0WK2239G5nrRyB/CPeWRsS9IdVc3PgU2Vfsq4bm6zO1e2P06Vn3LmbU3J530i8JE2+z6HVOe2zscwXNI/NVowIm4gvYfyU0k71tqo0s9JD8kjfbcAp0saJGnbfCyXtomhlQMkTcg3W18Grqr0YSvbx/8AODyPfEjS+pL2qrtwaGaF/q9Zfa5fMSfX+0kvbdXW3Z/UtnaPBj+Ly33aRnTVqYY6TcA/k7SUdAVyPHAW6WWRRs4mvSSwMO/8F3Xz9ye9BbuI9EbkFeTX/yPiPtKd0Lfz+nuTfgL1QgcxtttvRyJieUTcEBHLG8xut49vAh+RtFjSt9rtS9JmeZsHRcSyiLiMdIHyjSarfJp0pTyHNPpwGen3Zm3lq/zLgTl5+GZkm+VfJpX/9qQXLhaSkkezBL4e8FNSRZ5DusrdJ2/rWdJbrb/N+96FlAB3IL3Y8j+kl4XaOR04IW/jcx0sXz2eWaTym0a6Y11KeqGj45+etHAKaVjtAVLCubjFsmeROqFfkpLVeaRnpEtJF35TSHcJj5Kuyms/YzgQeFBpuP5wUjtp5Py8/5tzPM/R+oKgkTvV/XfAZ+fpk4FZkpaR6vqUiHiOdLd2VT6ee0gv9NQuDA8iPTr5M2ko7ypaD4dWtWtPnwS+nPumk2g+KlBvKekdhz9IeobUlu8mJQNIb+fPAh6VtLDFdr5Berb5GOkx0qsJK5/P3Ult6FFSB/6ePPtH+b+LJP0xfz6RdMe8mFSfLmt1ABHxU1L9mJbrxN2kF8qa+QjpDe4rSG3ubtLb4Dfk+fuRHoM9QmrHX4qI61vF0MbFpFGFR0kvdh2V417pPj4iZpBe+PoOqZxmk25c2mrS/zWrz42cS2qDNaeRRtBuq7STcyrzPwpc2GBYupva24bFSLoCuDciVvaO1azH8t3hEtJLbw8UDsfsb4ak6aQR0h+WjqW3KP2e93bScPOCDpa9E/j7aPPvMqzxfws6D6u9MQ9HTQb2JT3TMlutJO2dhwvXJz2jvov05qSZWVMR8XxETGiXfCvLvqVd8oUy/zOGTUmvqS8j/Xj5iGjwT+KZrQb7kobYHgG2Ig05lR0CMrN+q/gQtJmZWX/k/x2hmZlZAf5H7juwySabxLhx40qH0SfMnDmzdAh9xo477lg6hD7D9aKL60WXmTNnLoyIEaXj6Ks8BN2BiRMnxowZM0qH0Seo8T9s1S+57XRxvejietFF0syImFg6jr7KQ9BmZmYFOAGbmZkV4ARsZmZWgBOwmZlZAU7AZmZmBTgBm5mZFeAEbGZmVoATsJmZWQFOwGZmZgU4AZuZmRXgBGxmZlaAE7CZmVkBTsBmZmYFOAGbmZkV4ARsZmZWgBOwmZlZAU7AZmZmBTgBm5mZFeAEbGZmVoATsJmZWQFOwGZmZgU4AZuZmRXQLxOwpMmS7pM0W9KxpeMxM7P+p98lYEkDgO8CewITgP0kTSgblZmZ9Tf9LgEDOwGzI2JORLwATAP2LRyTmZn1M/0xAY8C5lW+z8/TupH0CUkzJM144okn1lhwZmbWP/THBKwG02KFCRHfj4iJETFxxIgRayAsMzPrT/pjAp4PjKl8Hw08UigWMzPrp/pjAr4N2ErS5pLWAaYA1xSOyczM+pmBpQNY0yLiJUlHAtcBA4DzI2JW4bDMzKyf6XcJGCAirgWuLR2HmZn1X/1xCNrMzKw4J2AzM7MCnIDNzMwKcAI2MzMrwAnYzMysACdgMzOzApyAzczMCnACNjMzK8AJ2MzMrAAnYDMzswKcgM3MzApwAjYzMyvACdjMzKwAJ2AzM7MCnIDNzMwKcAI2MzMrwAnYzMysACdgMzOzApyAzczMCnACNjMzK8AJ2MzMrABFROkY+jxJTwBzS8cBbAIsLB1EH+By6OKy6OKy6NJXymJsRIwoHURf5QT8GiJpRkRMLB1HaS6HLi6LLi6LLi6L1wYPQZuZmRXgBGxmZlaAE/Bry/dLB9BHuBy6uCy6uCy6uCxeA/wM2MzMrADfAZuZmRXgBGxmZlaAE/BrgKTJku6TNFvSsaXjKUXS+ZIel3R36VhKkzRG0o2S7pE0S9JnSsdUiqRBkm6VdGcui1NKx1SapAGSbpf089KxWHNOwH2cpAHAd4E9gQnAfpImlI2qmAuAyaWD6CNeAo6OiPHALsCn+nG9eB54b0RsB2wPTJa0S9mQivsMcE/pIKw1J+C+bydgdkTMiYgXgGnAvoVjKiIibgaeLB1HXxARCyLij/nzUlJnO6psVGVEsix/XTv/9du3SyWNBvYCflg6FmvNCbjvGwXMq3yfTz/taK0xSeOAtwF/KBxKMXnI9Q7gceD6iOi3ZQGcDXweeKVwHNaGE3DfpwbT+u3VvXUnaQjwY+CzEfF06XhKiYiXI2J7YDSwk6RtCodUhKQPAo9HxMzSsVh7TsB933xgTOX7aOCRQrFYHyJpbVLyvTQiflI6nr4gIpYA0+m/7wq8C9hH0oOkx1XvlXRJ2ZCsGSfgvu82YCtJm0taB5gCXFM4JitMkoDzgHsi4qzS8ZQkaYSkDfLnwcBuwL1FgyokIo6LiNERMY7UV/wqIg4oHJY14QTcx0XES8CRwHWkF22ujIhZZaMqQ9LlwO+AN0uaL+nQ0jEV9C7gQNIdzh357wOlgyrkDcCNkv5EumC9PiL88xvr8/xPUZqZmRXgO2AzM7MCnIDNzMwKcAI2MzMrwAnYzMysACdgMzOzApyAzczMCnACNjMzK+D/Aahbcu/r+5/2AAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The binary matrix representation for the full_matrix_no is: \n",
      " [[0 1 1 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0]]\n",
      "The vector containing the lengths of the hierarchical structure encoded in full_matrix_no is: \n",
      " [[2]]\n",
      "The binary matrix with 1's where hierarchical structure begins and 0's otherwise is: \n",
      " [[0 1 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0]]\n",
      "The vector containing the annotation markers of the hierarchical structure encoded in each row \n",
      " of full_matrix_no is: \n",
      " [1]\n"
     ]
    }
   ],
   "source": [
    "output = hierarchical_structure(matrix_no_overlaps, key_no_overlaps, sn, vis=True)\n",
    "\n",
    "full_visualization = output[0]\n",
    "full_key = output[1]\n",
    "full_matrix_no = output[2]\n",
    "full_anno_lst = output[3]\n",
    "\n",
    "print(\"The binary matrix representation for the full_matrix_no is: \\n\", full_visualization)\n",
    "print(\"The vector containing the lengths of the hierarchical structure encoded in full_matrix_no is: \\n\", full_key)\n",
    "print(\"The binary matrix with 1's where hierarchical structure begins and 0's otherwise is: \\n\", full_matrix_no)\n",
    "print(\"The vector containing the annotation markers of the hierarchical structure encoded in each row \\n of full_matrix_no is: \\n\", full_anno_lst)"
   ]
  }
 ],
 "metadata": {
  "interpreter": {
   "hash": "f9558a7a9c0790c2334a9072034da5d30cf10fd46d803cfe3584dbca0180200c"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
