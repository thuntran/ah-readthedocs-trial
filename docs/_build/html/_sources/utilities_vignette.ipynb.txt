{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# The Utilities Module\n",
    "\n",
    "The `utilities` module of the `mirah` package holds functions commonly called by other modules in order for the entire package to run smoothly.\n",
    "`utilities` includes the following functions:\n",
    "- __create_sdm__: Creates a self-dissimilarity matrix; this matrix is found by creating audio shingles from feature vectors, and finding the cosine distance between shingles.\n",
    "\n",
    "- __find_initial_repeats__: Finds all diagonals present in *thresh\\_mat*, removing each diagonal as it is found.\n",
    "\n",
    "- __stretch_diags__: Fills out diagonals in binary self dissimilarity matrix from diagonal starts and lengths.\n",
    "\n",
    "- __add_annotations__: Adds annotations to each pair of repeated structures according to their length and order of occurence. \n",
    "\n",
    "- **\\_\\_find_song_pattern** : Stitches information about repeat locations from _thresh\\_diags_ matrix into a single row. \n",
    "\n",
    "- __reconstruct_full_block__: Creates a record of when pairs of repeated structures occur, from the first beat in the song to the last beat of the song. Pairs of repeated structures are marked with 1's.\n",
    "\n",
    "- **get_annotation_list**: Gets one annotation marker vector, given vector of lengths *key\\_lst*.\n",
    "\n",
    "- **get_yLabels**: Generates the labels for a visualization with *width\\_vec* and *anno\\_vec*.\n",
    "\n",
    "- __reformat__ : 【Only used for creating test examples】Transforms a binary matrix representation of when repeats occur in a song into a list of repeated structures detailing the length and occurence of each repeat. \n",
    "    \n",
    "These functions are called multiple times throughout the package to reformat the outputs of various functions. Functions from `utilities` are shown in yellow in the example function pipeline below.\n",
    "![alt text](pictures/function_pipeline.png)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Importing necessary modules"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [],
   "source": [
    "# NumPy is used for mathematical calculations\n",
    "import numpy as np\n",
    "\n",
    "# Matplotlib is used to display output\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Import utilities\n",
    "current_dir = os.path.dirname(os.path.realpath('__file__'))\n",
    "relative_path = os.path.join(current_dir, '..')\n",
    "sys.path.append(relative_path)\n",
    "import mirah\n",
    "from mirah.utilities import *\n",
    "from mirah.utilities import __find_song_pattern"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## create_sdm\n",
    "\n",
    "This function creates a self-dissimilarity matrix. This matrix is found by creating audio shingles from feature vectors, and finding the cosine distance between shingles.\n",
    "\n",
    "The inputs for the function are:\n",
    "- __fv_mat__ (np.ndarray): A matrix of feature vectors where each column is a timestep and each row includes feature information i.e. an array of 144 columns/beats and 12 rows corresponding to chroma values.\n",
    "- __num_fv_per_shingle__ (int): The number of feature vectors per audio shingle.\n",
    "\n",
    "The output for the function is:\n",
    "- __self_dissim_mat__ (np.ndarray): A self dissimilarity matrix with paired cosine distances between shingles."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [
    {
     "output_type": "stream",
     "name": "stdout",
     "text": [
      "The input matrix of feature vectors is:\n [[0.  0.5 0.  0.  0.  1.  0.  0. ]\n [0.  2.  0.  0.  0.  0.  0.  0. ]\n [0.  0.  0.  0.  0.  0.  3.  0. ]\n [0.  3.  0.  0.  2.  0.  0.  0. ]\n [0.  1.5 0.  0.  5.  0.  0.  0. ]]\nThe number of feature vectors per audio shingles is: 3\n"
     ]
    }
   ],
   "source": [
    "fv_mat = np.array([[0, 0.5, 0, 0, 0, 1, 0, 0],\n",
    "                   [0,   2, 0, 0, 0, 0, 0, 0],\n",
    "                   [0,   0, 0, 0, 0, 0, 3, 0],\n",
    "                   [0,   3, 0, 0, 2, 0, 0, 0],\n",
    "                   [0, 1.5, 0, 0, 5, 0, 0, 0]])\n",
    "\n",
    "num_fv_per_shingle = 3\n",
    "\n",
    "print('The input matrix of feature vectors is:\\n', fv_mat)\n",
    "print('The number of feature vectors per audio shingles is:', num_fv_per_shingle)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "output_type": "stream",
     "name": "stdout",
     "text": [
      "The resulting self-dissimilarity matrix is:\n [[0.         1.         1.         0.37395249 0.9796637  1.        ]\n [1.         0.         1.         1.         0.45092001 0.95983903]\n [1.         1.         0.         1.         1.         1.        ]\n [0.37395249 1.         1.         0.         1.         1.        ]\n [0.9796637  0.45092001 1.         1.         0.         1.        ]\n [1.         0.95983903 1.         1.         1.         0.        ]]\n"
     ]
    }
   ],
   "source": [
    "self_dissim_mat  = create_sdm(fv_mat, num_fv_per_shingle)\n",
    "print('The resulting self-dissimilarity matrix is:\\n', self_dissim_mat)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The resulting self-dissimilarity can be shown as a picture in which the color represents the similarity between two shingles. The darker the color of a pixel, the more similar the two shingles are.  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [
    {
     "output_type": "display_data",
     "data": {
      "text/plain": "<Figure size 432x288 with 1 Axes>",
      "image/svg+xml": "<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"no\"?>\r\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\r\n  \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\r\n<svg height=\"263.63625pt\" version=\"1.1\" viewBox=\"0 0 245.2025 263.63625\" width=\"245.2025pt\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\r\n <metadata>\r\n  <rdf:RDF xmlns:cc=\"http://creativecommons.org/ns#\" xmlns:dc=\"http://purl.org/dc/elements/1.1/\" xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\">\r\n   <cc:Work>\r\n    <dc:type rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\"/>\r\n    <dc:date>2021-07-01T16:34:31.042465</dc:date>\r\n    <dc:format>image/svg+xml</dc:format>\r\n    <dc:creator>\r\n     <cc:Agent>\r\n      <dc:title>Matplotlib v3.4.2, https://matplotlib.org/</dc:title>\r\n     </cc:Agent>\r\n    </dc:creator>\r\n   </cc:Work>\r\n  </rdf:RDF>\r\n </metadata>\r\n <defs>\r\n  <style type=\"text/css\">*{stroke-linecap:butt;stroke-linejoin:round;}</style>\r\n </defs>\r\n <g id=\"figure_1\">\r\n  <g id=\"patch_1\">\r\n   <path d=\"M 0 263.63625 \r\nL 245.2025 263.63625 \r\nL 245.2025 0 \r\nL 0 0 \r\nz\r\n\" style=\"fill:none;\"/>\r\n  </g>\r\n  <g id=\"axes_1\">\r\n   <g id=\"patch_2\">\r\n    <path d=\"M 20.5625 239.758125 \r\nL 238.0025 239.758125 \r\nL 238.0025 22.318125 \r\nL 20.5625 22.318125 \r\nz\r\n\" style=\"fill:#ffffff;\"/>\r\n   </g>\r\n   <g clip-path=\"url(#p87cb594896)\">\r\n    <image height=\"218\" id=\"image6f38479174\" transform=\"scale(1 -1)translate(0 -218)\" width=\"218\" x=\"20.5625\" xlink:href=\"data:image/png;base64,\r\niVBORw0KGgoAAAANSUhEUgAAANoAAADaCAYAAADAHVzbAAADA0lEQVR4nO3dIa6aURRG0fs3xTBJGAQGi2YGGEaJwPA0RZCmyb436Voj+MzOkWd7vV6vsZDH4zF7wof9fj97An9p27bZE978mj0A/gdCg4DQICA0CAgNAkKDgNAgIDQICA0CQoOA0CAgNAgIDQJCg4DQICA0CAgNAkKDgNAgIDQICA0CQoOA0CAgNAgIDQJCg4DQICA0CAgNAkKDgNAgIDQICA0CQoOA0CCwPZ/PpX5Yn8/n2RM+XK/X2ROWttq/6DHGWOw1u4sGBaFBQGgQEBoEhAYBoUFAaBAQGgSEBgGhQUBoEBAaBIQGAaFBQGgQEBoEhAYBoUFAaBAQGgSEBgGhQUBoEBAaBIQGAaFBQGgQEBoEhAYBoUFAaBAQGgSEBgGhQUBoEBAaBLbD4bDUV+37/T57wvJWe86+2mP2FbloEBAaBIQGAaFBQGgQEBoEhAYBoUFAaBAQGgSEBgGhQUBoEBAaBIQGAaFBQGgQEBoEhAYBoUFAaBAQGgSEBgGhQUBoEBAaBIQGAaFBQGgQEBoEhAYBoUFAaBAQGgSEBoHt5QHxV35G869cNAgIDQJCg4DQICA0CAgNAkKDgNAgIDQICA0CQoOA0CAgNAgIDQJCg4DQICA0CAgNAkKDgNAgIDQICA0CQoOA0CAgNAgIDQJCg4DQICA0CAgNAkKDgNAgIDQICA0CQoPA79kD/rTav+gx/Iz+5nQ6zZ7w4XK5zJ7wxkWDgNAgIDQICA0CQoOA0CAgNAgIDQJCg4DQICA0CAgNAkKDgNAgIDQICA0CQoOA0CAgNAgIDQJCg4DQICA0CAgNAkKDgNAgIDQICA0CQoOA0CAgNAgIDQJCg4DQICA0CAgNAtsYY6lP6B6zf3c8HmdPeHO73WZP+LDb7WZPeOOiQUBoEBAaBIQGAaFBQGgQEBoEhAYBoUFAaBAQGgSEBgGhQUBoEBAaBIQGAaFBQGgQEBoEhAYBoUFAaBAQGgSEBgGhQUBoEBAaBIQGAaFBQGgQEBoEhAYBoUFAaBAQGgR+ALCMLYNqKmfyAAAAAElFTkSuQmCC\" y=\"-21.758125\"/>\r\n   </g>\r\n   <g id=\"matplotlib.axis_1\">\r\n    <g id=\"xtick_1\">\r\n     <g id=\"line2d_1\">\r\n      <defs>\r\n       <path d=\"M 0 0 \r\nL 0 3.5 \r\n\" id=\"m4b78d31ec3\" style=\"stroke:#000000;stroke-width:0.8;\"/>\r\n      </defs>\r\n      <g>\r\n       <use style=\"stroke:#000000;stroke-width:0.8;\" x=\"38.6825\" xlink:href=\"#m4b78d31ec3\" y=\"239.758125\"/>\r\n      </g>\r\n     </g>\r\n     <g id=\"text_1\">\r\n      <!-- 0 -->\r\n      <g transform=\"translate(35.50125 254.356563)scale(0.1 -0.1)\">\r\n       <defs>\r\n        <path d=\"M 2034 4250 \r\nQ 1547 4250 1301 3770 \r\nQ 1056 3291 1056 2328 \r\nQ 1056 1369 1301 889 \r\nQ 1547 409 2034 409 \r\nQ 2525 409 2770 889 \r\nQ 3016 1369 3016 2328 \r\nQ 3016 3291 2770 3770 \r\nQ 2525 4250 2034 4250 \r\nz\r\nM 2034 4750 \r\nQ 2819 4750 3233 4129 \r\nQ 3647 3509 3647 2328 \r\nQ 3647 1150 3233 529 \r\nQ 2819 -91 2034 -91 \r\nQ 1250 -91 836 529 \r\nQ 422 1150 422 2328 \r\nQ 422 3509 836 4129 \r\nQ 1250 4750 2034 4750 \r\nz\r\n\" id=\"DejaVuSans-30\" transform=\"scale(0.015625)\"/>\r\n       </defs>\r\n       <use xlink:href=\"#DejaVuSans-30\"/>\r\n      </g>\r\n     </g>\r\n    </g>\r\n    <g id=\"xtick_2\">\r\n     <g id=\"line2d_2\">\r\n      <g>\r\n       <use style=\"stroke:#000000;stroke-width:0.8;\" x=\"74.9225\" xlink:href=\"#m4b78d31ec3\" y=\"239.758125\"/>\r\n      </g>\r\n     </g>\r\n     <g id=\"text_2\">\r\n      <!-- 1 -->\r\n      <g transform=\"translate(71.74125 254.356563)scale(0.1 -0.1)\">\r\n       <defs>\r\n        <path d=\"M 794 531 \r\nL 1825 531 \r\nL 1825 4091 \r\nL 703 3866 \r\nL 703 4441 \r\nL 1819 4666 \r\nL 2450 4666 \r\nL 2450 531 \r\nL 3481 531 \r\nL 3481 0 \r\nL 794 0 \r\nL 794 531 \r\nz\r\n\" id=\"DejaVuSans-31\" transform=\"scale(0.015625)\"/>\r\n       </defs>\r\n       <use xlink:href=\"#DejaVuSans-31\"/>\r\n      </g>\r\n     </g>\r\n    </g>\r\n    <g id=\"xtick_3\">\r\n     <g id=\"line2d_3\">\r\n      <g>\r\n       <use style=\"stroke:#000000;stroke-width:0.8;\" x=\"111.1625\" xlink:href=\"#m4b78d31ec3\" y=\"239.758125\"/>\r\n      </g>\r\n     </g>\r\n     <g id=\"text_3\">\r\n      <!-- 2 -->\r\n      <g transform=\"translate(107.98125 254.356563)scale(0.1 -0.1)\">\r\n       <defs>\r\n        <path d=\"M 1228 531 \r\nL 3431 531 \r\nL 3431 0 \r\nL 469 0 \r\nL 469 531 \r\nQ 828 903 1448 1529 \r\nQ 2069 2156 2228 2338 \r\nQ 2531 2678 2651 2914 \r\nQ 2772 3150 2772 3378 \r\nQ 2772 3750 2511 3984 \r\nQ 2250 4219 1831 4219 \r\nQ 1534 4219 1204 4116 \r\nQ 875 4013 500 3803 \r\nL 500 4441 \r\nQ 881 4594 1212 4672 \r\nQ 1544 4750 1819 4750 \r\nQ 2544 4750 2975 4387 \r\nQ 3406 4025 3406 3419 \r\nQ 3406 3131 3298 2873 \r\nQ 3191 2616 2906 2266 \r\nQ 2828 2175 2409 1742 \r\nQ 1991 1309 1228 531 \r\nz\r\n\" id=\"DejaVuSans-32\" transform=\"scale(0.015625)\"/>\r\n       </defs>\r\n       <use xlink:href=\"#DejaVuSans-32\"/>\r\n      </g>\r\n     </g>\r\n    </g>\r\n    <g id=\"xtick_4\">\r\n     <g id=\"line2d_4\">\r\n      <g>\r\n       <use style=\"stroke:#000000;stroke-width:0.8;\" x=\"147.4025\" xlink:href=\"#m4b78d31ec3\" y=\"239.758125\"/>\r\n      </g>\r\n     </g>\r\n     <g id=\"text_4\">\r\n      <!-- 3 -->\r\n      <g transform=\"translate(144.22125 254.356563)scale(0.1 -0.1)\">\r\n       <defs>\r\n        <path d=\"M 2597 2516 \r\nQ 3050 2419 3304 2112 \r\nQ 3559 1806 3559 1356 \r\nQ 3559 666 3084 287 \r\nQ 2609 -91 1734 -91 \r\nQ 1441 -91 1130 -33 \r\nQ 819 25 488 141 \r\nL 488 750 \r\nQ 750 597 1062 519 \r\nQ 1375 441 1716 441 \r\nQ 2309 441 2620 675 \r\nQ 2931 909 2931 1356 \r\nQ 2931 1769 2642 2001 \r\nQ 2353 2234 1838 2234 \r\nL 1294 2234 \r\nL 1294 2753 \r\nL 1863 2753 \r\nQ 2328 2753 2575 2939 \r\nQ 2822 3125 2822 3475 \r\nQ 2822 3834 2567 4026 \r\nQ 2313 4219 1838 4219 \r\nQ 1578 4219 1281 4162 \r\nQ 984 4106 628 3988 \r\nL 628 4550 \r\nQ 988 4650 1302 4700 \r\nQ 1616 4750 1894 4750 \r\nQ 2613 4750 3031 4423 \r\nQ 3450 4097 3450 3541 \r\nQ 3450 3153 3228 2886 \r\nQ 3006 2619 2597 2516 \r\nz\r\n\" id=\"DejaVuSans-33\" transform=\"scale(0.015625)\"/>\r\n       </defs>\r\n       <use xlink:href=\"#DejaVuSans-33\"/>\r\n      </g>\r\n     </g>\r\n    </g>\r\n    <g id=\"xtick_5\">\r\n     <g id=\"line2d_5\">\r\n      <g>\r\n       <use style=\"stroke:#000000;stroke-width:0.8;\" x=\"183.6425\" xlink:href=\"#m4b78d31ec3\" y=\"239.758125\"/>\r\n      </g>\r\n     </g>\r\n     <g id=\"text_5\">\r\n      <!-- 4 -->\r\n      <g transform=\"translate(180.46125 254.356563)scale(0.1 -0.1)\">\r\n       <defs>\r\n        <path d=\"M 2419 4116 \r\nL 825 1625 \r\nL 2419 1625 \r\nL 2419 4116 \r\nz\r\nM 2253 4666 \r\nL 3047 4666 \r\nL 3047 1625 \r\nL 3713 1625 \r\nL 3713 1100 \r\nL 3047 1100 \r\nL 3047 0 \r\nL 2419 0 \r\nL 2419 1100 \r\nL 313 1100 \r\nL 313 1709 \r\nL 2253 4666 \r\nz\r\n\" id=\"DejaVuSans-34\" transform=\"scale(0.015625)\"/>\r\n       </defs>\r\n       <use xlink:href=\"#DejaVuSans-34\"/>\r\n      </g>\r\n     </g>\r\n    </g>\r\n    <g id=\"xtick_6\">\r\n     <g id=\"line2d_6\">\r\n      <g>\r\n       <use style=\"stroke:#000000;stroke-width:0.8;\" x=\"219.8825\" xlink:href=\"#m4b78d31ec3\" y=\"239.758125\"/>\r\n      </g>\r\n     </g>\r\n     <g id=\"text_6\">\r\n      <!-- 5 -->\r\n      <g transform=\"translate(216.70125 254.356563)scale(0.1 -0.1)\">\r\n       <defs>\r\n        <path d=\"M 691 4666 \r\nL 3169 4666 \r\nL 3169 4134 \r\nL 1269 4134 \r\nL 1269 2991 \r\nQ 1406 3038 1543 3061 \r\nQ 1681 3084 1819 3084 \r\nQ 2600 3084 3056 2656 \r\nQ 3513 2228 3513 1497 \r\nQ 3513 744 3044 326 \r\nQ 2575 -91 1722 -91 \r\nQ 1428 -91 1123 -41 \r\nQ 819 9 494 109 \r\nL 494 744 \r\nQ 775 591 1075 516 \r\nQ 1375 441 1709 441 \r\nQ 2250 441 2565 725 \r\nQ 2881 1009 2881 1497 \r\nQ 2881 1984 2565 2268 \r\nQ 2250 2553 1709 2553 \r\nQ 1456 2553 1204 2497 \r\nQ 953 2441 691 2322 \r\nL 691 4666 \r\nz\r\n\" id=\"DejaVuSans-35\" transform=\"scale(0.015625)\"/>\r\n       </defs>\r\n       <use xlink:href=\"#DejaVuSans-35\"/>\r\n      </g>\r\n     </g>\r\n    </g>\r\n   </g>\r\n   <g id=\"matplotlib.axis_2\">\r\n    <g id=\"ytick_1\">\r\n     <g id=\"line2d_7\">\r\n      <defs>\r\n       <path d=\"M 0 0 \r\nL -3.5 0 \r\n\" id=\"m3db4cdd969\" style=\"stroke:#000000;stroke-width:0.8;\"/>\r\n      </defs>\r\n      <g>\r\n       <use style=\"stroke:#000000;stroke-width:0.8;\" x=\"20.5625\" xlink:href=\"#m3db4cdd969\" y=\"40.438125\"/>\r\n      </g>\r\n     </g>\r\n     <g id=\"text_7\">\r\n      <!-- 0 -->\r\n      <g transform=\"translate(7.2 44.237344)scale(0.1 -0.1)\">\r\n       <use xlink:href=\"#DejaVuSans-30\"/>\r\n      </g>\r\n     </g>\r\n    </g>\r\n    <g id=\"ytick_2\">\r\n     <g id=\"line2d_8\">\r\n      <g>\r\n       <use style=\"stroke:#000000;stroke-width:0.8;\" x=\"20.5625\" xlink:href=\"#m3db4cdd969\" y=\"76.678125\"/>\r\n      </g>\r\n     </g>\r\n     <g id=\"text_8\">\r\n      <!-- 1 -->\r\n      <g transform=\"translate(7.2 80.477344)scale(0.1 -0.1)\">\r\n       <use xlink:href=\"#DejaVuSans-31\"/>\r\n      </g>\r\n     </g>\r\n    </g>\r\n    <g id=\"ytick_3\">\r\n     <g id=\"line2d_9\">\r\n      <g>\r\n       <use style=\"stroke:#000000;stroke-width:0.8;\" x=\"20.5625\" xlink:href=\"#m3db4cdd969\" y=\"112.918125\"/>\r\n      </g>\r\n     </g>\r\n     <g id=\"text_9\">\r\n      <!-- 2 -->\r\n      <g transform=\"translate(7.2 116.717344)scale(0.1 -0.1)\">\r\n       <use xlink:href=\"#DejaVuSans-32\"/>\r\n      </g>\r\n     </g>\r\n    </g>\r\n    <g id=\"ytick_4\">\r\n     <g id=\"line2d_10\">\r\n      <g>\r\n       <use style=\"stroke:#000000;stroke-width:0.8;\" x=\"20.5625\" xlink:href=\"#m3db4cdd969\" y=\"149.158125\"/>\r\n      </g>\r\n     </g>\r\n     <g id=\"text_10\">\r\n      <!-- 3 -->\r\n      <g transform=\"translate(7.2 152.957344)scale(0.1 -0.1)\">\r\n       <use xlink:href=\"#DejaVuSans-33\"/>\r\n      </g>\r\n     </g>\r\n    </g>\r\n    <g id=\"ytick_5\">\r\n     <g id=\"line2d_11\">\r\n      <g>\r\n       <use style=\"stroke:#000000;stroke-width:0.8;\" x=\"20.5625\" xlink:href=\"#m3db4cdd969\" y=\"185.398125\"/>\r\n      </g>\r\n     </g>\r\n     <g id=\"text_11\">\r\n      <!-- 4 -->\r\n      <g transform=\"translate(7.2 189.197344)scale(0.1 -0.1)\">\r\n       <use xlink:href=\"#DejaVuSans-34\"/>\r\n      </g>\r\n     </g>\r\n    </g>\r\n    <g id=\"ytick_6\">\r\n     <g id=\"line2d_12\">\r\n      <g>\r\n       <use style=\"stroke:#000000;stroke-width:0.8;\" x=\"20.5625\" xlink:href=\"#m3db4cdd969\" y=\"221.638125\"/>\r\n      </g>\r\n     </g>\r\n     <g id=\"text_12\">\r\n      <!-- 5 -->\r\n      <g transform=\"translate(7.2 225.437344)scale(0.1 -0.1)\">\r\n       <use xlink:href=\"#DejaVuSans-35\"/>\r\n      </g>\r\n     </g>\r\n    </g>\r\n   </g>\r\n   <g id=\"patch_3\">\r\n    <path d=\"M 20.5625 239.758125 \r\nL 20.5625 22.318125 \r\n\" style=\"fill:none;stroke:#000000;stroke-linecap:square;stroke-linejoin:miter;stroke-width:0.8;\"/>\r\n   </g>\r\n   <g id=\"patch_4\">\r\n    <path d=\"M 238.0025 239.758125 \r\nL 238.0025 22.318125 \r\n\" style=\"fill:none;stroke:#000000;stroke-linecap:square;stroke-linejoin:miter;stroke-width:0.8;\"/>\r\n   </g>\r\n   <g id=\"patch_5\">\r\n    <path d=\"M 20.5625 239.758125 \r\nL 238.0025 239.758125 \r\n\" style=\"fill:none;stroke:#000000;stroke-linecap:square;stroke-linejoin:miter;stroke-width:0.8;\"/>\r\n   </g>\r\n   <g id=\"patch_6\">\r\n    <path d=\"M 20.5625 22.318125 \r\nL 238.0025 22.318125 \r\n\" style=\"fill:none;stroke:#000000;stroke-linecap:square;stroke-linejoin:miter;stroke-width:0.8;\"/>\r\n   </g>\r\n   <g id=\"text_13\">\r\n    <!-- The self-dissimilarity matrix -->\r\n    <g transform=\"translate(46.034375 16.318125)scale(0.12 -0.12)\">\r\n     <defs>\r\n      <path d=\"M -19 4666 \r\nL 3928 4666 \r\nL 3928 4134 \r\nL 2272 4134 \r\nL 2272 0 \r\nL 1638 0 \r\nL 1638 4134 \r\nL -19 4134 \r\nL -19 4666 \r\nz\r\n\" id=\"DejaVuSans-54\" transform=\"scale(0.015625)\"/>\r\n      <path d=\"M 3513 2113 \r\nL 3513 0 \r\nL 2938 0 \r\nL 2938 2094 \r\nQ 2938 2591 2744 2837 \r\nQ 2550 3084 2163 3084 \r\nQ 1697 3084 1428 2787 \r\nQ 1159 2491 1159 1978 \r\nL 1159 0 \r\nL 581 0 \r\nL 581 4863 \r\nL 1159 4863 \r\nL 1159 2956 \r\nQ 1366 3272 1645 3428 \r\nQ 1925 3584 2291 3584 \r\nQ 2894 3584 3203 3211 \r\nQ 3513 2838 3513 2113 \r\nz\r\n\" id=\"DejaVuSans-68\" transform=\"scale(0.015625)\"/>\r\n      <path d=\"M 3597 1894 \r\nL 3597 1613 \r\nL 953 1613 \r\nQ 991 1019 1311 708 \r\nQ 1631 397 2203 397 \r\nQ 2534 397 2845 478 \r\nQ 3156 559 3463 722 \r\nL 3463 178 \r\nQ 3153 47 2828 -22 \r\nQ 2503 -91 2169 -91 \r\nQ 1331 -91 842 396 \r\nQ 353 884 353 1716 \r\nQ 353 2575 817 3079 \r\nQ 1281 3584 2069 3584 \r\nQ 2775 3584 3186 3129 \r\nQ 3597 2675 3597 1894 \r\nz\r\nM 3022 2063 \r\nQ 3016 2534 2758 2815 \r\nQ 2500 3097 2075 3097 \r\nQ 1594 3097 1305 2825 \r\nQ 1016 2553 972 2059 \r\nL 3022 2063 \r\nz\r\n\" id=\"DejaVuSans-65\" transform=\"scale(0.015625)\"/>\r\n      <path id=\"DejaVuSans-20\" transform=\"scale(0.015625)\"/>\r\n      <path d=\"M 2834 3397 \r\nL 2834 2853 \r\nQ 2591 2978 2328 3040 \r\nQ 2066 3103 1784 3103 \r\nQ 1356 3103 1142 2972 \r\nQ 928 2841 928 2578 \r\nQ 928 2378 1081 2264 \r\nQ 1234 2150 1697 2047 \r\nL 1894 2003 \r\nQ 2506 1872 2764 1633 \r\nQ 3022 1394 3022 966 \r\nQ 3022 478 2636 193 \r\nQ 2250 -91 1575 -91 \r\nQ 1294 -91 989 -36 \r\nQ 684 19 347 128 \r\nL 347 722 \r\nQ 666 556 975 473 \r\nQ 1284 391 1588 391 \r\nQ 1994 391 2212 530 \r\nQ 2431 669 2431 922 \r\nQ 2431 1156 2273 1281 \r\nQ 2116 1406 1581 1522 \r\nL 1381 1569 \r\nQ 847 1681 609 1914 \r\nQ 372 2147 372 2553 \r\nQ 372 3047 722 3315 \r\nQ 1072 3584 1716 3584 \r\nQ 2034 3584 2315 3537 \r\nQ 2597 3491 2834 3397 \r\nz\r\n\" id=\"DejaVuSans-73\" transform=\"scale(0.015625)\"/>\r\n      <path d=\"M 603 4863 \r\nL 1178 4863 \r\nL 1178 0 \r\nL 603 0 \r\nL 603 4863 \r\nz\r\n\" id=\"DejaVuSans-6c\" transform=\"scale(0.015625)\"/>\r\n      <path d=\"M 2375 4863 \r\nL 2375 4384 \r\nL 1825 4384 \r\nQ 1516 4384 1395 4259 \r\nQ 1275 4134 1275 3809 \r\nL 1275 3500 \r\nL 2222 3500 \r\nL 2222 3053 \r\nL 1275 3053 \r\nL 1275 0 \r\nL 697 0 \r\nL 697 3053 \r\nL 147 3053 \r\nL 147 3500 \r\nL 697 3500 \r\nL 697 3744 \r\nQ 697 4328 969 4595 \r\nQ 1241 4863 1831 4863 \r\nL 2375 4863 \r\nz\r\n\" id=\"DejaVuSans-66\" transform=\"scale(0.015625)\"/>\r\n      <path d=\"M 313 2009 \r\nL 1997 2009 \r\nL 1997 1497 \r\nL 313 1497 \r\nL 313 2009 \r\nz\r\n\" id=\"DejaVuSans-2d\" transform=\"scale(0.015625)\"/>\r\n      <path d=\"M 2906 2969 \r\nL 2906 4863 \r\nL 3481 4863 \r\nL 3481 0 \r\nL 2906 0 \r\nL 2906 525 \r\nQ 2725 213 2448 61 \r\nQ 2172 -91 1784 -91 \r\nQ 1150 -91 751 415 \r\nQ 353 922 353 1747 \r\nQ 353 2572 751 3078 \r\nQ 1150 3584 1784 3584 \r\nQ 2172 3584 2448 3432 \r\nQ 2725 3281 2906 2969 \r\nz\r\nM 947 1747 \r\nQ 947 1113 1208 752 \r\nQ 1469 391 1925 391 \r\nQ 2381 391 2643 752 \r\nQ 2906 1113 2906 1747 \r\nQ 2906 2381 2643 2742 \r\nQ 2381 3103 1925 3103 \r\nQ 1469 3103 1208 2742 \r\nQ 947 2381 947 1747 \r\nz\r\n\" id=\"DejaVuSans-64\" transform=\"scale(0.015625)\"/>\r\n      <path d=\"M 603 3500 \r\nL 1178 3500 \r\nL 1178 0 \r\nL 603 0 \r\nL 603 3500 \r\nz\r\nM 603 4863 \r\nL 1178 4863 \r\nL 1178 4134 \r\nL 603 4134 \r\nL 603 4863 \r\nz\r\n\" id=\"DejaVuSans-69\" transform=\"scale(0.015625)\"/>\r\n      <path d=\"M 3328 2828 \r\nQ 3544 3216 3844 3400 \r\nQ 4144 3584 4550 3584 \r\nQ 5097 3584 5394 3201 \r\nQ 5691 2819 5691 2113 \r\nL 5691 0 \r\nL 5113 0 \r\nL 5113 2094 \r\nQ 5113 2597 4934 2840 \r\nQ 4756 3084 4391 3084 \r\nQ 3944 3084 3684 2787 \r\nQ 3425 2491 3425 1978 \r\nL 3425 0 \r\nL 2847 0 \r\nL 2847 2094 \r\nQ 2847 2600 2669 2842 \r\nQ 2491 3084 2119 3084 \r\nQ 1678 3084 1418 2786 \r\nQ 1159 2488 1159 1978 \r\nL 1159 0 \r\nL 581 0 \r\nL 581 3500 \r\nL 1159 3500 \r\nL 1159 2956 \r\nQ 1356 3278 1631 3431 \r\nQ 1906 3584 2284 3584 \r\nQ 2666 3584 2933 3390 \r\nQ 3200 3197 3328 2828 \r\nz\r\n\" id=\"DejaVuSans-6d\" transform=\"scale(0.015625)\"/>\r\n      <path d=\"M 2194 1759 \r\nQ 1497 1759 1228 1600 \r\nQ 959 1441 959 1056 \r\nQ 959 750 1161 570 \r\nQ 1363 391 1709 391 \r\nQ 2188 391 2477 730 \r\nQ 2766 1069 2766 1631 \r\nL 2766 1759 \r\nL 2194 1759 \r\nz\r\nM 3341 1997 \r\nL 3341 0 \r\nL 2766 0 \r\nL 2766 531 \r\nQ 2569 213 2275 61 \r\nQ 1981 -91 1556 -91 \r\nQ 1019 -91 701 211 \r\nQ 384 513 384 1019 \r\nQ 384 1609 779 1909 \r\nQ 1175 2209 1959 2209 \r\nL 2766 2209 \r\nL 2766 2266 \r\nQ 2766 2663 2505 2880 \r\nQ 2244 3097 1772 3097 \r\nQ 1472 3097 1187 3025 \r\nQ 903 2953 641 2809 \r\nL 641 3341 \r\nQ 956 3463 1253 3523 \r\nQ 1550 3584 1831 3584 \r\nQ 2591 3584 2966 3190 \r\nQ 3341 2797 3341 1997 \r\nz\r\n\" id=\"DejaVuSans-61\" transform=\"scale(0.015625)\"/>\r\n      <path d=\"M 2631 2963 \r\nQ 2534 3019 2420 3045 \r\nQ 2306 3072 2169 3072 \r\nQ 1681 3072 1420 2755 \r\nQ 1159 2438 1159 1844 \r\nL 1159 0 \r\nL 581 0 \r\nL 581 3500 \r\nL 1159 3500 \r\nL 1159 2956 \r\nQ 1341 3275 1631 3429 \r\nQ 1922 3584 2338 3584 \r\nQ 2397 3584 2469 3576 \r\nQ 2541 3569 2628 3553 \r\nL 2631 2963 \r\nz\r\n\" id=\"DejaVuSans-72\" transform=\"scale(0.015625)\"/>\r\n      <path d=\"M 1172 4494 \r\nL 1172 3500 \r\nL 2356 3500 \r\nL 2356 3053 \r\nL 1172 3053 \r\nL 1172 1153 \r\nQ 1172 725 1289 603 \r\nQ 1406 481 1766 481 \r\nL 2356 481 \r\nL 2356 0 \r\nL 1766 0 \r\nQ 1100 0 847 248 \r\nQ 594 497 594 1153 \r\nL 594 3053 \r\nL 172 3053 \r\nL 172 3500 \r\nL 594 3500 \r\nL 594 4494 \r\nL 1172 4494 \r\nz\r\n\" id=\"DejaVuSans-74\" transform=\"scale(0.015625)\"/>\r\n      <path d=\"M 2059 -325 \r\nQ 1816 -950 1584 -1140 \r\nQ 1353 -1331 966 -1331 \r\nL 506 -1331 \r\nL 506 -850 \r\nL 844 -850 \r\nQ 1081 -850 1212 -737 \r\nQ 1344 -625 1503 -206 \r\nL 1606 56 \r\nL 191 3500 \r\nL 800 3500 \r\nL 1894 763 \r\nL 2988 3500 \r\nL 3597 3500 \r\nL 2059 -325 \r\nz\r\n\" id=\"DejaVuSans-79\" transform=\"scale(0.015625)\"/>\r\n      <path d=\"M 3513 3500 \r\nL 2247 1797 \r\nL 3578 0 \r\nL 2900 0 \r\nL 1881 1375 \r\nL 863 0 \r\nL 184 0 \r\nL 1544 1831 \r\nL 300 3500 \r\nL 978 3500 \r\nL 1906 2253 \r\nL 2834 3500 \r\nL 3513 3500 \r\nz\r\n\" id=\"DejaVuSans-78\" transform=\"scale(0.015625)\"/>\r\n     </defs>\r\n     <use xlink:href=\"#DejaVuSans-54\"/>\r\n     <use x=\"61.083984\" xlink:href=\"#DejaVuSans-68\"/>\r\n     <use x=\"124.462891\" xlink:href=\"#DejaVuSans-65\"/>\r\n     <use x=\"185.986328\" xlink:href=\"#DejaVuSans-20\"/>\r\n     <use x=\"217.773438\" xlink:href=\"#DejaVuSans-73\"/>\r\n     <use x=\"269.873047\" xlink:href=\"#DejaVuSans-65\"/>\r\n     <use x=\"331.396484\" xlink:href=\"#DejaVuSans-6c\"/>\r\n     <use x=\"359.179688\" xlink:href=\"#DejaVuSans-66\"/>\r\n     <use x=\"388.884766\" xlink:href=\"#DejaVuSans-2d\"/>\r\n     <use x=\"424.96875\" xlink:href=\"#DejaVuSans-64\"/>\r\n     <use x=\"488.445312\" xlink:href=\"#DejaVuSans-69\"/>\r\n     <use x=\"516.228516\" xlink:href=\"#DejaVuSans-73\"/>\r\n     <use x=\"568.328125\" xlink:href=\"#DejaVuSans-73\"/>\r\n     <use x=\"620.427734\" xlink:href=\"#DejaVuSans-69\"/>\r\n     <use x=\"648.210938\" xlink:href=\"#DejaVuSans-6d\"/>\r\n     <use x=\"745.623047\" xlink:href=\"#DejaVuSans-69\"/>\r\n     <use x=\"773.40625\" xlink:href=\"#DejaVuSans-6c\"/>\r\n     <use x=\"801.189453\" xlink:href=\"#DejaVuSans-61\"/>\r\n     <use x=\"862.46875\" xlink:href=\"#DejaVuSans-72\"/>\r\n     <use x=\"903.582031\" xlink:href=\"#DejaVuSans-69\"/>\r\n     <use x=\"931.365234\" xlink:href=\"#DejaVuSans-74\"/>\r\n     <use x=\"970.574219\" xlink:href=\"#DejaVuSans-79\"/>\r\n     <use x=\"1029.753906\" xlink:href=\"#DejaVuSans-20\"/>\r\n     <use x=\"1061.541016\" xlink:href=\"#DejaVuSans-6d\"/>\r\n     <use x=\"1158.953125\" xlink:href=\"#DejaVuSans-61\"/>\r\n     <use x=\"1220.232422\" xlink:href=\"#DejaVuSans-74\"/>\r\n     <use x=\"1259.441406\" xlink:href=\"#DejaVuSans-72\"/>\r\n     <use x=\"1300.554688\" xlink:href=\"#DejaVuSans-69\"/>\r\n     <use x=\"1328.337891\" xlink:href=\"#DejaVuSans-78\"/>\r\n    </g>\r\n   </g>\r\n  </g>\r\n </g>\r\n <defs>\r\n  <clipPath id=\"p87cb594896\">\r\n   <rect height=\"217.44\" width=\"217.44\" x=\"20.5625\" y=\"22.318125\"/>\r\n  </clipPath>\r\n </defs>\r\n</svg>\r\n",
      "image/png": "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\n"
     },
     "metadata": {
      "needs_background": "light"
     }
    }
   ],
   "source": [
    "plt.imshow(self_dissim_mat,cmap='gray')\n",
    "plt.title(\"The self-dissimilarity matrix\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## find_initial_repeats\n",
    "\n",
    "This function identifies all repeated structures in a sequential data stream which are represented as diagonals in *thresh\\_mat* and then stores the pairs of repeats that correspond to each repeated structure in a list. The function finds the diagonals of lengths from the largest to the smallest, searches for non-overlapping shingles first, and cuts the overlapping shingles to up to 3 non-overlapping parts. As each diagonal is found, they are removed to avoid identifying repeated sub-structures. \n",
    "\n",
    "The image below illutrates the overlapping parts given two repeats starting with time steps $i$ and $j$ and having length $k$. The left and right segments will always exist because $i \\neq j$, but the middle segment will only exist if $k > 2(j - i)$.\n",
    "\n",
    "![alt text](pictures/find_initial_repeats.png)\n",
    "\n",
    "The inputs for the function are:\n",
    "- __thresh_mat__ (np.ndarray): A thresholded matrix from which diagonals are extracted.\n",
    "- __bandwidth_vec__ (np.ndarray): A vector of lengths of diagonals to be found.\n",
    "- __thresh_bw__ (int): The smallest allowed diagonal length.\n",
    "\n",
    "The output for the function is:\n",
    "- __all_lst__ (np.ndarray): Pairs of repeats that correspond to diagonals in *thresh\\_mat*."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [
    {
     "output_type": "stream",
     "name": "stdout",
     "text": [
      "The thresholded matrix is:\n [[1 0 0 1 0 0 0 1 0 0]\n [0 1 0 0 1 1 0 0 1 0]\n [0 0 1 0 0 1 1 0 0 1]\n [1 0 0 1 0 0 1 1 0 0]\n [0 1 0 0 1 0 1 0 0 0]\n [0 1 1 0 0 1 0 1 1 0]\n [0 0 1 1 1 0 1 0 1 0]\n [1 0 0 1 0 1 0 1 0 1]\n [0 1 0 0 0 1 1 0 1 0]\n [0 0 1 0 0 0 0 1 0 1]]\nThe lengths of diagonals to be found are: [ 1  2  3  4  5  6  7  8  9 10]\nThe smalled allowed diagonal length is: 0\n"
     ]
    }
   ],
   "source": [
    "thresh_mat = np.array([[1, 0, 0, 1, 0, 0, 0, 1, 0, 0],\n",
    "                       [0, 1, 0, 0, 1, 1, 0, 0, 1, 0],\n",
    "                       [0, 0, 1, 0, 0, 1, 1, 0, 0, 1],\n",
    "                       [1, 0, 0, 1, 0, 0, 1, 1, 0, 0],\n",
    "                       [0, 1, 0, 0, 1, 0, 1, 0, 0, 0],\n",
    "                       [0, 1, 1, 0, 0, 1, 0, 1, 1, 0],\n",
    "                       [0, 0, 1, 1, 1, 0, 1, 0, 1, 0],\n",
    "                       [1, 0, 0, 1, 0, 1, 0, 1, 0, 1],\n",
    "                       [0, 1, 0, 0, 0, 1, 1, 0, 1, 0],\n",
    "                       [0, 0, 1, 0, 0, 0, 0, 1, 0, 1]])\n",
    "\n",
    "bandwidth_vec = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n",
    "thresh_bw = 0\n",
    "\n",
    "print('The thresholded matrix is:\\n', thresh_mat)\n",
    "print('The lengths of diagonals to be found are:', bandwidth_vec)\n",
    "print('The smalled allowed diagonal length is:', thresh_bw)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [
    {
     "output_type": "stream",
     "name": "stdout",
     "text": [
      "The pairs of repeats are:\n [[ 6  6  9  9  1]\n [ 5  6  7  8  2]\n [ 7  8  9 10  2]\n [ 1  3  4  6  3]\n [ 1  3  8 10  3]\n [ 2  4  5  7  3]\n [ 2  4  6  8  3]\n [ 1 10  1 10 10]]\n"
     ]
    }
   ],
   "source": [
    "all_lst = find_initial_repeats(thresh_mat, bandwidth_vec, thresh_bw)\n",
    "\n",
    "print(\"The pairs of repeats are:\\n\", all_lst)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## stretch_diags\n",
    "\n",
    "This function creates binary matrix with full length diagonals from binary matrix of diagonal starts and length of diagonals.\n",
    "        \n",
    "The inputs for the function are:\n",
    "- __thresh_diags__ (np.ndarray): A binary matrix where entries equal to 1 signal the existence of a diagonal.\n",
    "- __band_width__ (int): The length of encoded diagonals.\n",
    "\n",
    "The output for the function is:\n",
    "- __stretch_diag_mat__ (np.ndarray): A logical matrix with diagonals of length _band\\_width_ starting at each entry prescribed in *thresh\\_diag*."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [
    {
     "output_type": "stream",
     "name": "stdout",
     "text": [
      "The input matrix is:\n [[0 0 1 0 0]\n [0 1 0 0 0]\n [0 0 1 0 0]\n [0 0 0 0 0]\n [0 0 0 0 0]]\nThe length of the encoded diagonals is: 3\n"
     ]
    }
   ],
   "source": [
    "thresh_diags = np.matrix([[0, 0, 1, 0, 0],\n",
    "                          [0, 1, 0, 0, 0],\n",
    "                          [0, 0, 1, 0, 0],\n",
    "                          [0, 0, 0, 0, 0],\n",
    "                          [0, 0, 0, 0, 0]])\n",
    "\n",
    "band_width = 3\n",
    "\n",
    "print(\"The input matrix is:\\n\", thresh_diags)\n",
    "print(\"The length of the encoded diagonals is:\", band_width)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [
    {
     "output_type": "stream",
     "name": "stdout",
     "text": [
      "The output matrix is:\n [[False False False False False False False]\n [False  True False False False False False]\n [ True False  True False False False False]\n [False  True False  True False False False]\n [False False  True False  True False False]\n [False False False False False False False]\n [False False False False False False False]]\n"
     ]
    }
   ],
   "source": [
    "stretched_diagonal = stretch_diags(thresh_diags, band_width)\n",
    "\n",
    "print(\"The output matrix is:\\n\", stretched_diagonal)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## add_annotations\n",
    "\n",
    "This function adds annotations to each pair of repeated structures according to their length and order of occurence to differentiate between different repeats of the same length.  `add_annotations` is called after a function, such as [`find_complete_list`](./search_vignette.ipynb) creates a matrix representation of pairs of repeats, *input\\_mat*. Once the list of pairs of repeats is generated, `add_annotations` first creates a binary matrix that denotes each repeat. `__find_song_pattern` uses this information to create a single row in which entries represent a time step and the repeat group that time step is a member of. Then, annotation markers are added to pairs of repeats by looping over all possible repeat lengths in ascending order. For each repeat length, the annotations are added in another loop, checking whether each repeat already has an anotation assigned. \n",
    "\n",
    "The inputs for the function are:\n",
    "- __input_mat__ (np.ndarray): Pairs of repeats. The first two columns refer to the first repeat of the pair. The third and fourth columns refer to the second repeat of the pair. The fifth column refers to the repeat lengths. The sixth column contains any previous annotations, which will be removed.\n",
    "- __song_length__ (int): The number of shingles in the song.\n",
    "\n",
    "The output for the function is:\n",
    "- __anno_list__ (np.ndarray): Pairs of repeats with annotations marked. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [
    {
     "output_type": "stream",
     "name": "stdout",
     "text": [
      "The input array is: \n [[ 2  5  8 11  4  0]\n [ 7 10 14 17  4  0]\n [ 2  5 15 18  4  0]\n [ 8 11 15 18  4  0]\n [ 9 12 16 19  4  0]]\nThe number of shingles is: 19\n"
     ]
    }
   ],
   "source": [
    "input_mat = np.array([[2,  5,  8, 11, 4, 0],\n",
    "                      [7, 10, 14, 17, 4, 0],\n",
    "                      [2,  5, 15, 18, 4, 0],\n",
    "                      [8, 11, 15, 18, 4, 0],\n",
    "                      [9, 12, 16, 19, 4, 0]])\n",
    "\n",
    "song_length = 19\n",
    "\n",
    "print(\"The input array is: \\n\", input_mat)\n",
    "print(\"The number of shingles is:\", song_length)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [
    {
     "output_type": "stream",
     "name": "stdout",
     "text": [
      "The array of repeats with annotations is:\n",
      " [[ 2  5  8 11  4  1]\n",
      " [ 2  5 15 18  4  1]\n",
      " [ 8 11 15 18  4  1]\n",
      " [ 7 10 14 17  4  2]\n",
      " [ 9 12 16 19  4  3]]\n"
     ]
    }
   ],
   "source": [
    "annotated_array = add_annotations(input_mat, song_length)\n",
    "print(\"The array of repeats with annotations is:\\n\", annotated_array)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## \\_\\_find_song_pattern\n",
    "\n",
    "This function decodes *thresh\\_diags* which contains the locations or beats of when repeats begin to create a single row in which entries represent a time step and the repeat group that time step is a member of.\n",
    "\n",
    "The input of this functions is: \n",
    "\n",
    "- **thresh\\_diags** (np.ndarray): Binary matrix with 1's at the start of each repeat pair and 0's elsewhere\n",
    "\n",
    "The output for this function is: \n",
    "\n",
    "- **song\\_pattern** (np.ndarray): Rows where each entry represents a time step and the group that the time step is a member of"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [
    {
     "output_type": "stream",
     "name": "stdout",
     "text": [
      "The input matrix is:\n [[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 1 0 0 0 0 0 0 1 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0]\n [0 1 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]]\n"
     ]
    }
   ],
   "source": [
    "thresh_diags = np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n",
    "                         [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0],\n",
    "                         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n",
    "                         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n",
    "                         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n",
    "                         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n",
    "                         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0],\n",
    "                         [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0],\n",
    "                         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0],\n",
    "                         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n",
    "                         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n",
    "                         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n",
    "                         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n",
    "                         [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n",
    "                         [0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n",
    "                         [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n",
    "                         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n",
    "                         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n",
    "                         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]])\n",
    "\n",
    "print(\"The input matrix is:\\n\", thresh_diags)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {},
   "outputs": [
    {
     "output_type": "stream",
     "name": "stdout",
     "text": [
      "The song pattern is:\n [0 1 0 0 0 0 2 1 3 0 0 0 0 2 1 3 0 0 0]\n"
     ]
    }
   ],
   "source": [
    "song_pattern = __find_song_pattern(thresh_diags)\n",
    "\n",
    "print(\"The song pattern is:\\n\", song_pattern)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## reconstruct_full_block\n",
    "\n",
    "This function creates a record of when pairs of repeated structures occur, from the first beat in the song to the end. This record is a binary matrix with a block of 1's for each repeat encoded in *pattern\\_mat* whose length is encoded in *pattern\\_key*. By looping over all rows of *pattern\\_mat*, `reconstruct_full_block` reconstructs each row using the *pattern\\_key*. \n",
    "\n",
    "For each row of *pattern\\_mat*, a new row is created for *pattern\\_block* by looping over the same row of *pattern\\_mat* and shifting the position of 1's the number of times equivalent to the length of the repeat, storing each unique row with shifted values in a separate array. The sum of all of the shifted rows is then taken along the x-axis, thus creating a row that represents where each repeat occurs with blocks of 1's.\n",
    "\n",
    "For example, if the row in *pattern\\_mat* is [0 0 1 0 0 0 0 0 1 0 0 0 1 0 0], with a repeat length of 3, then new rows created by the for loop are:\n",
    "<br><br>\n",
    "<center>[0 0 1 0 0 0 0 0 1 0 0 0 1 0 0]<br>\n",
    "[0 0 0 1 0 0 0 0 0 1 0 0 0 1 0]<br>\n",
    "[0 0 0 0 1 0 0 0 0 0 1 0 0 0 1]<br></center><br> \n",
    "\n",
    "These rows are then summed along the y-axis to become: [0 0 1 1 1 0 0 0 1 1 1 0 1 1 1] This is then appended to the output *pattern\\_block*. \n",
    "\n",
    "The inputs for the function are:\n",
    "- __pattern_mat__ (np.ndarray): A binary matrix with 1's where repeats begin and 0's otherwise\n",
    "- __pattern_key__ (np.ndarray): The number of feature vectors per audio shingle\n",
    "\n",
    "The output for the function is:\n",
    "- __pattern_block__ (np.ndarray): A binary matrix representation for *pattern\\_mat* with blocks of 1's equal to the length's prescribed in *pattern\\_key*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {},
   "outputs": [
    {
     "output_type": "stream",
     "name": "stdout",
     "text": [
      "The input binary matrix is:\n [[0 0 0 0 1 0 0 0 0 1]\n [0 1 0 0 0 0 0 1 0 0]\n [0 0 1 0 0 0 0 0 1 0]\n [1 0 0 0 0 0 1 0 0 0]\n [1 0 0 0 0 0 1 0 0 0]]\nThe input pattern key is:\n [1 2 2 3 4]\n"
     ]
    }
   ],
   "source": [
    "pattern_mat  = np.array([[0, 0, 0, 0, 1, 0, 0, 0, 0, 1],\n",
    "                         [0, 1, 0, 0, 0, 0, 0, 1, 0, 0],\n",
    "                         [0, 0, 1, 0, 0, 0, 0, 0, 1, 0],\n",
    "                         [1, 0, 0, 0, 0, 0, 1, 0, 0, 0],\n",
    "                         [1, 0, 0, 0, 0, 0, 1, 0, 0, 0]])\n",
    "\n",
    "pattern_key  = np.array([1, 2, 2, 3, 4])\n",
    "\n",
    "print(\"The input binary matrix is:\\n\", pattern_mat)\n",
    "print(\"The input pattern key is:\\n\", pattern_key)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {},
   "outputs": [
    {
     "output_type": "stream",
     "name": "stdout",
     "text": [
      "The reconstructed full block is:\n [[0 0 0 0 1 0 0 0 0 1]\n [0 1 1 0 0 0 0 1 1 0]\n [0 0 1 1 0 0 0 0 1 1]\n [1 1 1 0 0 0 1 1 1 0]\n [1 1 1 1 0 0 1 1 1 1]]\n"
     ]
    }
   ],
   "source": [
    "pattern_block  = reconstruct_full_block(pattern_mat, pattern_key)\n",
    "print(\"The reconstructed full block is:\\n\", pattern_block)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## get_annotation_list\n",
    "\n",
    "This function takes in vector of lengths *key\\_lst*, counts the time each length occurs as its annotation maker, and outputs all annotation markers as a vector.\n",
    "    \n",
    "The input for the function is:\n",
    "- **key_lst** (np.ndarray): Array of lengths in ascending order\n",
    "\n",
    "The output for the function is:\n",
    "- **anno_lst_out** (np.ndarray): Array of one possible set of annotation markers for *key\\_lst*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {},
   "outputs": [
    {
     "output_type": "stream",
     "name": "stdout",
     "text": [
      "The input array of lengths is: \n [1 2 2 3 3 3 5 7 8 8 9]\n"
     ]
    }
   ],
   "source": [
    "key_lst = np.array([1, 2, 2, 3, 3, 3, 5, 7, 8, 8, 9])\n",
    "\n",
    "print(\"The input array of lengths is: \\n\", key_lst)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {},
   "outputs": [
    {
     "output_type": "stream",
     "name": "stdout",
     "text": [
      "The output array is: \n [1 1 2 1 2 3 1 1 1 2 1]\n"
     ]
    }
   ],
   "source": [
    "anno_lst_out  = get_annotation_lst(key_lst)\n",
    "\n",
    "print(\"The output array is: \\n\", anno_lst_out )"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## get_yLabels\n",
    "This function generates labels for a visualization with repeat lengths and annotations of each length. Note that the first 0 is always printed out because it acts as the hidden origin label for the later visualization.\n",
    "\n",
    "The inputs for the function are:\n",
    "\n",
    "- **width_vec** (np.ndarray): Vector of widths for a visualization\n",
    "- **anno_vec** (np.ndarray): Array of annotations for a visualization\n",
    "\n",
    "The output for the function is:\n",
    "- **ylabels**(str): Labels for the y-axis of a visualization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {},
   "outputs": [
    {
     "output_type": "stream",
     "name": "stdout",
     "text": [
      "The vector of widths is: \n [[1]\n [2]\n [3]\n [4]\n [4]\n [5]\n [5]\n [6]]\nThe array of annotation makers is: \n [1 1 1 1 2 1 1 1]\n"
     ]
    }
   ],
   "source": [
    "width_vec = np.array([[1], [2], [3], [4], [4], [5], [5], [6]])\n",
    "anno_vec = np.array([1, 1, 1, 1, 2, 1, 1, 1])\n",
    "\n",
    "print(\"The vector of widths is: \\n\", width_vec)\n",
    "print(\"The array of annotation makers is: \\n\", anno_vec)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {},
   "outputs": [
    {
     "output_type": "stream",
     "name": "stdout",
     "text": [
      "The output string is: \n ['0' 'w = 1, a = 1' 'w = 2, a = 1' 'w = 3, a = 1' 'w = 4, a = 1'\n 'w = 4, a = 2' 'w = 5, a = 1' 'w = 5, a = 1' 'w = 6, a = 1']\n"
     ]
    }
   ],
   "source": [
    "ylabels = get_yLabels(width_vec, anno_vec)\n",
    "\n",
    "print(\"The output string is: \\n\", ylabels)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## reformat\n",
    "\n",
    "This function is helpful when writing example inputs for aligned hiearchies. It is not used in the main functions for creating the aligned hierarchies. It first finds the starting indices of the repeated structures row by row, and assigns the time steps of the repeated structures based on starting indices.\n",
    "        \n",
    "The inputs for the function are:\n",
    "- __pattern_mat__ (np.ndarray): Binary array with 1's where repeats start and 0's otherwise \n",
    "- __pattern_key__ (np.ndarray): Array with the lengths of each repeated structure in *pattern\\_mat*\n",
    "\n",
    "The output for the function is:\n",
    "- __info_mat__ (np.ndarray): Array with the time steps of when the pairs of repeated structures start and end organized"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {},
   "outputs": [
    {
     "output_type": "stream",
     "name": "stdout",
     "text": [
      "The input matrix is:\n [[0 0 0 0 1 0 0 0 0 1]\n [0 1 0 0 0 0 0 1 0 0]\n [0 0 1 0 0 0 0 0 1 0]\n [1 0 0 0 0 0 1 0 0 0]\n [1 0 0 0 0 0 1 0 0 0]]\nThe length of repeated structure is: [1 2 2 3 4]\n"
     ]
    }
   ],
   "source": [
    "pattern_mat = np.array([[0, 0, 0, 0, 1, 0, 0, 0, 0, 1],\n",
    "                        [0, 1, 0, 0, 0, 0, 0, 1, 0, 0],\n",
    "                        [0, 0, 1, 0, 0, 0, 0, 0, 1, 0],\n",
    "                        [1, 0, 0, 0, 0, 0, 1, 0, 0, 0],\n",
    "                        [1, 0, 0, 0, 0, 0, 1, 0, 0, 0]])\n",
    "\n",
    "pattern_key = np.array([1, 2, 2, 3, 4])\n",
    "\n",
    "print(\"The input matrix is:\\n\", pattern_mat)\n",
    "print(\"The length of repeated structure is:\", pattern_key)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {},
   "outputs": [
    {
     "output_type": "stream",
     "name": "stdout",
     "text": [
      "The output matrix is:\n [[ 5  5 10 10  1]\n [ 2  3  8  9  2]\n [ 3  4  9 10  2]\n [ 1  3  7  9  3]\n [ 1  4  7 10  4]]\n"
     ]
    }
   ],
   "source": [
    "info_mat  = reformat(pattern_mat, pattern_key)\n",
    "\n",
    "print(\"The output matrix is:\\n\", info_mat)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "name": "python3",
   "display_name": "Python 3.9.5 64-bit"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.5"
  },
  "interpreter": {
   "hash": "f9558a7a9c0790c2334a9072034da5d30cf10fd46d803cfe3584dbca0180200c"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}